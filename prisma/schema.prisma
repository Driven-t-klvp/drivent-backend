generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  email      String?     @unique @db.VarChar(255)
  password   String?     @db.VarChar(255)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  gitHubId   String?     @unique @db.VarChar(255)
  Booking    Booking[]
  Enrollment Enrollment?
  Session    Session[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id                 Int                @id @default(autoincrement())
  title              String             @db.VarChar(255)
  backgroundImageUrl String             @db.VarChar(255)
  logoImageUrl       String             @db.VarChar(255)
  startsAt           DateTime
  endsAt             DateTime
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  ActivityLocation   ActivityLocation[]
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  cpf       String   @db.VarChar(255)
  birthday  DateTime
  phone     String   @db.VarChar(255)
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Address   Address?
  Ticket    Ticket[]
}

model Address {
  id            Int        @id @default(autoincrement())
  cep           String     @db.VarChar(255)
  street        String     @db.VarChar(255)
  city          String     @db.VarChar(255)
  state         String     @db.VarChar(255)
  number        String     @db.VarChar(255)
  neighborhood  String     @db.VarChar(255)
  addressDetail String?    @db.VarChar(255)
  enrollmentId  Int        @unique
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Enrollment    Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
}

model TicketType {
  id                 Int      @id @default(autoincrement())
  name               String   @db.VarChar(255)
  price              Int
  isRemote           Boolean
  includesHotel      Boolean
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  fullActivityAccess Boolean  @default(false)
  Ticket             Ticket[]
}

model Ticket {
  id           Int          @id @default(autoincrement())
  ticketTypeId Int
  enrollmentId Int
  status       TicketStatus
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Enrollment   Enrollment   @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  TicketType   TicketType   @relation(fields: [ticketTypeId], references: [id], onDelete: Cascade)
  Payment      Payment[]
  Activities   Activity[]
}

model Payment {
  id             Int      @id @default(autoincrement())
  ticketId       Int
  value          Int
  cardIssuer     String
  cardLastDigits String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Ticket         Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model Hotel {
  id        Int      @id @default(autoincrement())
  name      String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Rooms     Room[]
}

model Room {
  id        Int       @id @default(autoincrement())
  name      String
  capacity  Int
  hotelId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Hotel     Hotel     @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  Booking   Booking[]
}

model Booking {
  id        Int      @id @default(autoincrement())
  userId    Int
  roomId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Teste {
  id   Int    @id @default(autoincrement())
  name String
}

model Activity {
  id         Int              @id @default(autoincrement())
  startsAt   DateTime         @db.Timestamptz(0)
  endsAt     DateTime         @db.Timestamptz(0)
  name       String
  openSeats  Int
  locationId Int
  Location   ActivityLocation @relation(fields: [locationId], references: [id], onDelete: Cascade)
  Tickets    Ticket[]

  @@unique([startsAt, locationId])
}

model ActivityLocation {
  id       Int        @id @default(autoincrement())
  name     String
  eventId  Int
  Event    Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  Activity Activity[]
}

enum TicketStatus {
  RESERVED
  PAID
}
